name: Kotlin CLI Checks on Windows

on: [push, pull_request]

jobs:
  test-kotlin-cli:
    runs-on: windows-latest

    steps:
      - name: Get Latest Kotlin Version Tag
        id: get_kotlin_version
        shell: bash
        run: |
          latest=$(curl -s https://api.github.com/repos/JetBrains/kotlin/releases/latest | jq -r .tag_name)
          echo "Latest Kotlin version: $latest"
          echo "version=$latest" >> $GITHUB_OUTPUT

      - name: Download Kotlin Compiler ZIP
        shell: pwsh
        run: |
          $version = '${{ steps.get_kotlin_version.outputs.version }}'
          $version = $version.TrimStart("v")
          $url = "https://github.com/JetBrains/kotlin/releases/download/v$version/kotlin-compiler-$version.zip"
          Write-Host "Downloading from $url"
          Invoke-WebRequest -Uri $url -OutFile kotlin-compiler.zip

      - name: Extract Kotlin Compiler and Run CLI Tests
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # Extract the ZIP
          Expand-Archive kotlin-compiler.zip -DestinationPath "$env:RUNNER_TEMP\kotlin"
          $kotlinBin = "$env:RUNNER_TEMP\kotlin\kotlinc\bin"

          # Add Kotlin bin to PATH for this session
          $env:PATH = "$kotlinBin;$env:PATH"
          Write-Host "PATH set to include Kotlin bin: $kotlinBin"

          # Check tools are visible
          Write-Host "`nChecking installed Kotlin tools:"
          Get-Command kotlin, kapt, kotlinc, kotlinc-jvm, kotlinc-js -ErrorAction SilentlyContinue | Format-Table

          # Define and run CLI test function
          function Test-CliTool {
              param (
                  [string]$cmd
              )
              Write-Host "`nüîπ Running: $cmd"

              $parts = $cmd.Split(" ")
              $exe = $parts[0]
              $args = $parts[1..($parts.Length - 1)]

              try {
                  $output = & $exe @args 2>&1
                  $exitCode = $LASTEXITCODE
                  Write-Host "Exit Code: $exitCode"
                  Write-Host "Output:`n$output"

                  if ($exitCode -ne 0) {
                      Write-Error "`n‚ùå $cmd failed with exit code $exitCode"
                      exit 1
                  } else {
                      Write-Host "`n‚úÖ $cmd passed"
                  }
              }
              catch {
                  Write-Error "`n‚ùå $cmd failed to execute: $_"
                  exit 1
              }
          }

          # Run tests
          Test-CliTool "kapt -version"
          Test-CliTool "kotlin -version"
          Test-CliTool "kotlinc -version"
          Test-CliTool "kotlinc-jvm -version"
          Test-CliTool "kotlinc-js -help"
          Test-CliTool "kotlinc-js -version"
